Coming back from shopping, Yihan has got a lot of bags of different candies. She then needs to take all them to the campus. Since they are now in different bags, 
she has to merge all of them into one bag.

She has 𝑛 bags of candies, the 𝑖-th bag containing 𝑎𝑖 candies. She can only merge two of them at a time. After two bags are merged, 
with size 𝑥 and 𝑦 respectively, they become one bag of candies with size 𝑥+𝑦. Yihan will repeatedly merge the bags until there is only one bag with size ∑𝑛𝑖=1𝑎𝑖.
Then she's done and can take the last bag to the campus.

The candies are small and it's easy to lose them when merging them together. To make sure that she doesn't lose any of them, Yihan has to count them carefully. 
Each time before merging of two bags 𝐴 and 𝐵, she counts the number of candies in bag 𝐴, noted as 𝑥, and counts the number of candies in bag 𝐵, noted as 𝑦. 
After merging them, she counts the number of candies in the new bag 𝐴∪𝐵, and check if it's 𝑥+𝑦. Thus, during each merge, all candies in the merge is counted twice. 
See the sample I/O explanation for further clarification.

Every counting process means to look at all the candies in the bag, one by one. So it is rather tedious and tiring. 
So Yihan wants to count as few candies as possible. You task is to help Yihan compute how many candies she needs to count at least. 
Given 𝑛 and all 𝑎𝑖, output the least number of candies Yihan needs to count. Suppose by carefully counting, Yihan won't lose any candies.

Input
The first line is a single integer 𝑛 (1≤𝑛≤106). In each of the next 𝑛 lines, there is an integer that is the initial bag size 𝑎𝑖. 0≤𝑎𝑖≤231−1.

Output
The output contains only one number, which is the fewest number of candies that Yihan has to count. The final output value is guaranteed to be within 263−1.